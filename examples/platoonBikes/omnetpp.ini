[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 10s

#tkenv-default-config = debug
#tkenv-default-run = 1
tkenv-image-path = bitmaps

ned-path = .
network = scenario

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = false

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

**.debug = false
**.coreDebug = false

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = false

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.01s
*.manager.host = "localhost"
*.manager.port = 9999
*.manager.moduleType = "Vehicle"
*.manager.moduleName = "node"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.pMax = 100mW
*.connectionManager.sat = -94dBm
*.connectionManager.alpha = 2.0
*.connectionManager.carrierFrequency = 5.890e9 Hz
*.connectionManager.sendDirect = true

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 100mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.phy80211p.sensitivity = -94dBm
*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useThermalNoise = true
*.**.nic.phy80211p.thermalNoise = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895

#*.node[*].appl_type = "SimplePlatooningApp"
*.node[*].appl_type = "BikesApp"

**.scalar-recording = false
**.vector-recording = true

sim-time-limit = 600s

repeat = 1
seed-set = ${repetition}
**.seed = ${repetition}

#set the beaconing interval to be 0.1s
*.node[*].prot.beaconingInterval=${beaconInterval=0.1}s

[Config SinPlatoon]

**.scalar-recording = true
**.vector-recording = true

sim-time-limit = 460s

*.manager.launchConfig = xmldoc("sumocfg/cross.launchd.xml")

*.node[*].appl.leaderSpeed = 100kmph

#use a dummy variable for choosing the protocol (static beaconing or slotted beaconing)
#so that a number can be put into the file name instead of a string
dummy.protocol = ${protocol = 1}
*.node[*].protocol_type = ${"SimplePlatooningBeaconing", ! protocol}

[Config config]
extends = SinPlatoon

repeat=1

sim-time-limit = 1e6s

#use ACC or CACC
**.dummycontroller=${controller=0,0,1,2}
*.node[*].appl.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG" ! controller}
#ACC time headway. note that time headway for CACC and PLOEG is ignored
**.dummyheadway=${headway=0.3,1.2,0.3,0.0!controller}s
*.node[*].appl.accHeadway = ${headway}s

#access category for platooning beacons
*.node[*].prot.priority=${priority=2}
#packet size for platooning beacon
*.node[*].prot.packetSize=${packetSize=200}

#collect data for some minutes. This is just for example, might be changed
*.node[*].prot.communicationDuration=120s

#via wireless send acceleration computed by the controller, not the actual one
*.node[*].appl.useControllerAcceleration = true
*.node[*].prot.useControllerAcceleration = true
#controller and engine related parameters
*.node[*].appl.caccC1 = 0.5
*.node[*].appl.caccXi = 1
*.node[*].appl.caccOmegaN = 0.2Hz
*.node[*].appl.engineTau = 0.5s
*.node[*].appl.ploegH = 0.5s
*.node[*].appl.ploegKp = 0.2
*.node[*].appl.ploegKd = 0.7

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].appl.leaderOscillationFrequency = 0.2Hz

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca
