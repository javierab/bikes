//
// Generated file, do not edit! Created by opp_msgc 4.4 from veins/modules/application/platooning/messages/UnicastMessage.msg.
//

#ifndef _UNICASTMESSAGE_M_H_
#define _UNICASTMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>veins/modules/application/platooning/messages/UnicastMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum UnicastMessageType {
 * 	DATA = 0;
 * 	ACK = 1;
 * };
 * </pre>
 */
enum UnicastMessageType {
    DATA = 0,
    ACK = 1
};

/**
 * Class generated from <tt>veins/modules/application/platooning/messages/UnicastMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet UnicastMessage {
 *     
 *     int destination;
 *     
 *     int source;
 *     
 *     int sequenceNumber;
 *     
 *     int type enum(UnicastMessageType);
 *     
 *     
 *     
 *     
 *     
 *     int priority = 0;
 *     
 *     double recvPower_dBm;
 *     
 *     int channel;
 * }
 * </pre>
 */
class UnicastMessage : public ::cPacket
{
  protected:
    int destination_var;
    int source_var;
    int sequenceNumber_var;
    int type_var;
    int priority_var;
    double recvPower_dBm_var;
    int channel_var;

  private:
    void copy(const UnicastMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UnicastMessage&);

  public:
    UnicastMessage(const char *name=NULL, int kind=0);
    UnicastMessage(const UnicastMessage& other);
    virtual ~UnicastMessage();
    UnicastMessage& operator=(const UnicastMessage& other);
    virtual UnicastMessage *dup() const {return new UnicastMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual double getRecvPower_dBm() const;
    virtual void setRecvPower_dBm(double recvPower_dBm);
    virtual int getChannel() const;
    virtual void setChannel(int channel);
};

inline void doPacking(cCommBuffer *b, UnicastMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UnicastMessage& obj) {obj.parsimUnpack(b);}


#endif // _UNICASTMESSAGE_M_H_
